// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { TestAdminData, TestAdminResponses, AuthLoginData, AuthLoginResponses, AuthLoginErrors, AuthLogoutData, AuthLogoutResponses, AuthLogoutErrors, AuthSignupData, AuthSignupResponses, AuthSignupErrors, AuthCreateAdminData, AuthCreateAdminResponses, AuthCreateAdminErrors, AuthMeData, AuthMeResponses, AuthMeErrors, AuthLinksData, AuthLinksResponses, AuthLinksErrors, AuthAdminData, AuthAdminResponses, AuthAdminErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const testAdmin = <ThrowOnError extends boolean = false>(options?: Options<TestAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestAdminResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test-admin',
        ...options
    });
};

/**
 * Logs in a user given username and password. JWT token saved in browser cookies.
 */
export const authLogin = <ThrowOnError extends boolean = false>(options: Options<AuthLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthLoginResponses, AuthLoginErrors, ThrowOnError>({
        responseType: 'json',
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logs out current user by removing the token cookie
 */
export const authLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthLogoutResponses, AuthLogoutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/logout',
        ...options
    });
};

/**
 * Adds a new user to the database
 */
export const authSignup = <ThrowOnError extends boolean = false>(options: Options<AuthSignupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthSignupResponses, AuthSignupErrors, ThrowOnError>({
        url: '/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates an admin user account. Only compiled with `debug_assertions`. VERIFY NO ENDPOINT IN RELEASE CODE!!!
 */
export const authCreateAdmin = <ThrowOnError extends boolean = false>(options: Options<AuthCreateAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthCreateAdminResponses, AuthCreateAdminErrors, ThrowOnError>({
        url: '/create-admin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refreshes logged in user expiration (if any) and returns `User` data. If token does not exist, just returns `Status::Ok`.
 */
export const authMe = <ThrowOnError extends boolean = false>(options?: Options<AuthMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthMeResponses, AuthMeErrors, ThrowOnError>({
        responseType: 'json',
        url: '/me',
        ...options
    });
};

export const authLinks = <ThrowOnError extends boolean = false>(options?: Options<AuthLinksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthLinksResponses, AuthLinksErrors, ThrowOnError>({
        responseType: 'json',
        url: '/links',
        ...options
    });
};

export const authAdmin = <ThrowOnError extends boolean = false>(options?: Options<AuthAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthAdminResponses, AuthAdminErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admin',
        ...options
    });
};